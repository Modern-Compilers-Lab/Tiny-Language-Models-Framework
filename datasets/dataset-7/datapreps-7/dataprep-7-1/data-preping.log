|ITERS: 4 / 4 | COMP: 100.00% | RATE: 0.02 it./s | SPD: 40.7495 s/it.| ERT: (0, 0, 0, 0)                                                                                                                
|ITERS: 1 / 1 | COMP: 100.00% | RATE: 0.01 it./s | SPD: 94.3221 s/it.| ERT: (0, 0, 0, 0)                                                                                                                

Saving the data-preping-numpy-random state:
	--> saving it
	--> freeing its memory

Loading the dataset:

Get all the unique characters that occur in this text:
	--> all the unique characters: '\t\n !#%()*+,-./0123456789:<=>abcdefghijklmnopqrstuvwxyz'
	--> vocab size: 54

Create a mapping from characters to integers:

Save the meta information as well, to help us encode/decode later:
	--> freeing its memory

Split by examples using \n\n:
	--> splitting
	--> freeing data memory
	--> total number of examples: 30,000,000


Creating the train.txt, val.txt and test.txt:
	--> shuffling examples
	--> creating the train_examples
	--> train_examples has 24000000 examples
	--> creating the train_data
	--> train_data has 3325442228 tokens
	--> writing the train_data to train.txt
	--> creating the val_examples
	--> val_examples has 3000000 examples
	--> creating the val_data
	--> val_data has 415692367 tokens
	--> writing the val_data to val.txt
	--> creating the test_examples
	--> test_examples has 3000000 examples
	--> creating the test_data
	--> test_data has 415593231 tokens
	--> writing the test_data to test.txt
	--> freeing examples memory

We define the encoding function:

Reading and encoding train.txt directly to binary:

Reading and encoding val.txt directly to binary:
